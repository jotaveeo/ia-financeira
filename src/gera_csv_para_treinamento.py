import pandas as pd
import random
import uuid
from datetime import datetime, timedelta

# ============================================================================
# SOLU√á√ÉO EMERGENCIAL APLICADA - BASEADA NOS DADOS REAIS DO USU√ÅRIO
# ============================================================================

# Configura√ß√µes
EXEMPLOS_POR_CATEGORIA = 30  # Mais exemplos para categorias cr√≠ticas
DATA_INICIO = "01/01/2024"
DATA_FIM = "31/12/2024"

print("üö® GERADOR DE CSV CORRIGIDO - SOLU√á√ÉO EMERGENCIAL")
print("Baseado nos dados reais do usu√°rio para resolver problemas de produ√ß√£o")
print("=" * 70)

# ============================================================================
# CATEGORIAS CORRIGIDAS - REMOVENDO PROBLEM√ÅTICAS
# ============================================================================

# RECEITAS (mantidas)
CATEGORIAS_RECEITAS = [
    "Sal√°rio", "Freelance", "Investimentos", "Comiss√µes", 
    "Aluguel Recebido", "Vendas", "13¬∫ Sal√°rio", "F√©rias", 
    "Bonifica√ß√£o", "Restitui√ß√£o IR", "Pens√£o Recebida", "Renda Extra"
]

# DESPESAS - REMOVENDO "Taxas Banc√°rias" que estava causando 40% dos erros
CATEGORIAS_DESPESAS = [
    # Essenciais
    "Alimenta√ß√£o", "Supermercado", "Transporte", "Combust√≠vel",
    "Moradia", "Aluguel", "Energia El√©trica", "√Ågua", "Internet", "Telefone", "G√°s",
    
    # Sa√∫de
    "Sa√∫de", "Medicamentos", "Plano de Sa√∫de", "Academia", "Terapia",
    
    # Educa√ß√£o  
    "Educa√ß√£o", "Cursos", "Livros", "Material Escolar",
    
    # Lazer
    "Lazer", "Cinema", "Streaming", "Jogos", "Viagens", "Restaurantes", "Bares",
    
    # Vestu√°rio
    "Roupas", "Sapatos", "Cabeleireiro", "Cosm√©ticos",
    
    # Financeiro (SEM Taxas Banc√°rias)
    "Cart√£o de Cr√©dito", "Empr√©stimos", "Financiamentos", "Seguros",
    
    # Impostos
    "Impostos", "IPTU", "IPVA", "Multas",
    
    # Fam√≠lia
    "Crian√ßas", "Pets", "Presentes",
    
    # Investimentos (como despesa)
    "Poupan√ßa", "Previd√™ncia",
    
    # Diversos
    "Doa√ß√µes", "Assinaturas", "Outros"
]

# ============================================================================
# EMPRESAS REAIS DO USU√ÅRIO - BASEADAS NO CSV REAL
# ============================================================================

EMPRESAS_REAIS = {
    "Transporte": [
        # Uber (formato exato do banco)
        "Uber - 17.895.646/0001-87 - EBANX IP LTDA. (0383) Ag√™ncia: 1 Conta: 1000752180-1",
        "Uber",
        "EBANX IP LTDA",
        "Posto S√£o Crist√≥v√£o", 
        "Posto Elo Centro",
        "99", "inDriver"
    ],
    
    "Streaming": [
        # GOGIPSY (formato exato do banco)
        "GOGIPSY E/OU GOGIPSY BRASIL - 37.813.735/0001-44 - MERCADO PAGO IP LTDA. (0323) Ag√™ncia: 1 Conta: 7996434832-1",
        "GOGIPSY",
        "GOGIPSY BRASIL", 
        "Netflix", "Spotify", "Amazon Prime", "Disney+"
    ],
    
    "Alimenta√ß√£o": [
        "iFood", 
        "GIL DA TAPIOCA", 
        "CAFE PREMIUM", 
        "ESPETINHO MICHEL",
        "TARDELLI RESTAURANTE", 
        "MILK SHAKE MIX ITA", 
        "JAPEDIU DELIVERY - 38.026.413/0001-18 - EF√ç S.A. - IP (0364) Ag√™ncia: 1 Conta: 296299-3",
        "CafeDoCampus",
        "MP *THEOEVENTOS"
    ],
    
    "Supermercado": [
        "SUPERM SAO LUIZ", 
        "SUPERMERCADO PAULO BEL", 
        "BOM VIZINHO",
        "TAKE A CASE",
        "Carrefour", "Extra"
    ],
    
    "Medicamentos": [
        "PAGUE MENOS 243", 
        "BORALE",
        "Drogasil", "Ultrafarma", "Pacheco"
    ],
    
    "Roupas": [
        "RIACHUELO-FILIAL.108", 
        "FORTALEZA IGUATEMI",
        "Renner", "C&A", "Zara"
    ],
    
    "Energia El√©trica": [
        "NUVEI DO BRASIL INSTITUICAO DE PAGAMENTO LTDA. - 13.492.000/0001-06 - DOCK IP S.A. (0301) Ag√™ncia: 1 Conta: 4701-7",
        "FRANCISCO SEVERINO CHAVES - 13.682.442/0001-07 - NU PAGAMENTOS - IP (0260) Ag√™ncia: 1 Conta: 792923040-9",
        "Enel", "Light", "Copel"
    ],
    
    "Freelance": [
        "JOSE TEIXEIRA CORREIA - ‚Ä¢‚Ä¢‚Ä¢.640.433-‚Ä¢‚Ä¢ - BCO BRADESCO S.A. (0237) Ag√™ncia: 1351 Conta: 672038-2",
        "DIGITAL COLLEGE FORTALEZA LTDA - 43.082.596/0003-90 - ITA√ö UNIBANCO S.A. (0341) Ag√™ncia: 8142 Conta: 98166-4",
        "FRANCISCA E M P AZEVEDO ME - 20.725.700/0001-50 - CAIXA ECONOMICA FEDERAL (0104) Ag√™ncia: 748 Conta: 578389441-5",
        "JOAO V O TEIXEIRA CORREIA - ‚Ä¢‚Ä¢‚Ä¢.593.083-‚Ä¢‚Ä¢ - BCO DO BRASIL S.A. (0001) Ag√™ncia: 374 Conta: 71394-5"
    ]
}

# ============================================================================
# GERADORES ESPEC√çFICOS BASEADOS NOS DADOS REAIS
# ============================================================================

def gerar_descricao_transporte():
    """Gera descri√ß√µes de transporte baseadas nos dados reais"""
    tipo = random.choice(["uber", "posto", "outros"])
    
    if tipo == "uber":
        formatos = [
            "Transfer√™ncia enviada pelo Pix - Uber - 17.895.646/0001-87 - EBANX IP LTDA. (0383) Ag√™ncia: 1 Conta: 1000752180-1",
            "Reembolso recebido pelo Pix - Uber - 17.895.646/0001-87 - EBANX IP LTDA. (0383) Ag√™ncia: 1 Conta: 1000752180-1",
            "Compra no d√©bito via NuPay - Uber",
            "Uber - Corrida",
            "Pagamento Uber via PIX"
        ]
    elif tipo == "posto":
        posto = random.choice(["Posto S√£o Crist√≥v√£o", "Posto Elo Centro", "Ipiranga", "Shell"])
        formatos = [
            f"Compra no d√©bito - {posto}",
            f"Pagamento {posto} via PIX",
            f"{posto} - Abastecimento"
        ]
    else:
        empresa = random.choice(["99", "inDriver", "Estacionamento"])
        formatos = [
            f"Compra no d√©bito - {empresa}",
            f"Transfer√™ncia enviada pelo Pix - {empresa}",
            f"{empresa} - Viagem"
        ]
    
    return random.choice(formatos)

def gerar_descricao_streaming():
    """Gera descri√ß√µes de streaming baseadas nos dados reais"""
    tipo = random.choice(["gogipsy", "netflix", "outros"])
    
    if tipo == "gogipsy":
        formatos = [
            "Transfer√™ncia enviada pelo Pix - GOGIPSY E/OU GOGIPSY BRASIL - 37.813.735/0001-44 - MERCADO PAGO IP LTDA. (0323) Ag√™ncia: 1 Conta: 7996434832-1",
            "Transfer√™ncia enviada pelo Pix - GOGIPSY BRASIL",
            "Compra no d√©bito - GOGIPSY",
            "GOGIPSY - Assinatura"
        ]
    elif tipo == "netflix":
        formatos = [
            "Netflix - Assinatura mensal",
            "Compra no d√©bito - Netflix",
            "Netflix Premium",
            "Assinatura Netflix"
        ]
    else:
        empresa = random.choice(["Spotify", "Amazon Prime", "Disney+", "YouTube Premium"])
        formatos = [
            f"Assinatura {empresa}",
            f"Compra no d√©bito - {empresa}",
            f"{empresa} - Plano Premium"
        ]
    
    return random.choice(formatos)

def gerar_descricao_alimentacao():
    """Gera descri√ß√µes de alimenta√ß√£o baseadas nos dados reais"""
    empresa = random.choice(EMPRESAS_REAIS["Alimenta√ß√£o"])
    
    if empresa == "iFood":
        formatos = [
            "Compra no d√©bito via NuPay - iFood",
            "Compra no d√©bito - IFD*IFOOD CLUB",
            "iFood - Pedido",
            "Transfer√™ncia enviada pelo Pix - iFood"
        ]
    elif "JAPEDIU" in empresa:
        return f"Transfer√™ncia enviada pelo Pix - {empresa}"
    else:
        formatos = [
            f"Compra no d√©bito - {empresa}",
            f"Transfer√™ncia enviada pelo Pix - {empresa}",
            f"{empresa} - Refei√ß√£o"
        ]
    
    return random.choice(formatos)

def gerar_descricao_supermercado():
    """Gera descri√ß√µes de supermercado baseadas nos dados reais"""
    empresa = random.choice(EMPRESAS_REAIS["Supermercado"])
    
    formatos = [
        f"Compra no d√©bito - {empresa}",
        f"Transfer√™ncia enviada pelo Pix - {empresa}",
        f"{empresa} - Compras"
    ]
    
    return random.choice(formatos)

def gerar_descricao_medicamentos():
    """Gera descri√ß√µes de medicamentos baseadas nos dados reais"""
    empresa = random.choice(EMPRESAS_REAIS["Medicamentos"])
    
    formatos = [
        f"Compra no d√©bito - {empresa}",
        f"Transfer√™ncia enviada pelo Pix - {empresa}",
        f"{empresa} - Medicamentos"
    ]
    
    return random.choice(formatos)

def gerar_descricao_roupas():
    """Gera descri√ß√µes de roupas baseadas nos dados reais"""
    empresa = random.choice(EMPRESAS_REAIS["Roupas"])
    
    formatos = [
        f"Compra no d√©bito - {empresa}",
        f"Transfer√™ncia enviada pelo Pix - {empresa}",
        f"{empresa} - Vestu√°rio"
    ]
    
    return random.choice(formatos)

def gerar_descricao_energia():
    """Gera descri√ß√µes de energia baseadas nos dados reais"""
    if random.random() < 0.3:  # 30% chance de usar formato real
        empresa = random.choice(EMPRESAS_REAIS["Energia El√©trica"])
        return f"Transfer√™ncia enviada pelo Pix - {empresa}"
    else:
        empresa = random.choice(["Enel", "Light", "Copel", "Cemig"])
        formatos = [
            f"Transfer√™ncia enviada pelo Pix - {empresa}",
            f"Compra no d√©bito - {empresa}",
            f"{empresa} - Energia el√©trica"
        ]
        return random.choice(formatos)

def gerar_descricao_freelance():
    """Gera descri√ß√µes de freelance baseadas nos dados reais"""
    if random.random() < 0.5:  # 50% chance de usar formato real
        pessoa = random.choice(EMPRESAS_REAIS["Freelance"])
        return f"Transfer√™ncia recebida pelo Pix - {pessoa}"
    else:
        formatos = [
            "Transfer√™ncia Recebida - Freelance",
            "PIX Recebido - Trabalho freelance",
            "TED Recebida - Projeto freelance",
            "Dep√≥sito - Servi√ßo prestado"
        ]
        return random.choice(formatos)

def gerar_descricao_investimentos():
    """Gera descri√ß√µes de investimentos baseadas nos dados reais"""
    tipo = random.choice(["aplicacao", "resgate", "outros"])
    
    if tipo == "aplicacao":
        return "Aplica√ß√£o RDB"
    elif tipo == "resgate":
        return "Resgate RDB"
    else:
        formatos = [
            "Tesouro Direto - Aplica√ß√£o",
            "CDB - Investimento",
            "Poupan√ßa - Dep√≥sito",
            "Fundo de investimento"
        ]
        return random.choice(formatos)

# ============================================================================
# CONFIGURA√á√ÉO DE GERADORES POR CATEGORIA
# ============================================================================

GERADORES_ESPECIFICOS = {
    "Transporte": gerar_descricao_transporte,
    "Streaming": gerar_descricao_streaming,
    "Alimenta√ß√£o": gerar_descricao_alimentacao,
    "Supermercado": gerar_descricao_supermercado,
    "Medicamentos": gerar_descricao_medicamentos,
    "Roupas": gerar_descricao_roupas,
    "Energia El√©trica": gerar_descricao_energia,
    "Freelance": gerar_descricao_freelance,
    "Investimentos": gerar_descricao_investimentos
}

# ============================================================================
# FAIXAS DE VALORES REALISTAS
# ============================================================================

def determinar_faixa_valor(categoria):
    """Faixas baseadas nos dados reais do usu√°rio"""
    faixas = {
        # RECEITAS
        "Sal√°rio": (1500, 8000),
        "Freelance": (100, 2000),
        "Investimentos": (50, 3000),
        "13¬∫ Sal√°rio": (1500, 8000),
        "Aluguel Recebido": (800, 3000),
        "Comiss√µes": (100, 1500),
        "Vendas": (50, 1000),
        "F√©rias": (1000, 6000),
        "Bonifica√ß√£o": (200, 3000),
        "Restitui√ß√£o IR": (100, 2000),
        "Pens√£o Recebida": (300, 1500),
        "Renda Extra": (100, 800),
        
        # DESPESAS CR√çTICAS (baseadas nos dados reais)
        "Transporte": (5, 50),        # Uber: R$ 5-50
        "Alimenta√ß√£o": (5, 80),       # Caf√©s e refei√ß√µes: R$ 5-80
        "Supermercado": (30, 200),    # Compras: R$ 30-200
        "Streaming": (10, 50),        # Assinaturas: R$ 10-50
        "Medicamentos": (10, 100),    # Farm√°cias: R$ 10-100
        "Roupas": (50, 500),          # Vestu√°rio: R$ 50-500
        
        # OUTRAS DESPESAS
        "Combust√≠vel": (30, 200),
        "Moradia": (100, 1000),
        "Aluguel": (600, 4000),
        "Energia El√©trica": (60, 300),
        "√Ågua": (25, 120),
        "Internet": (50, 150),
        "Telefone": (30, 100),
        "G√°s": (20, 80),
        "Sa√∫de": (50, 300),
        "Plano de Sa√∫de": (150, 600),
        "Academia": (50, 150),
        "Terapia": (80, 250),
        "Educa√ß√£o": (200, 1500),
        "Cursos": (50, 400),
        "Livros": (20, 100),
        "Material Escolar": (30, 150),
        "Lazer": (30, 200),
        "Cinema": (15, 50),
        "Jogos": (20, 150),
        "Viagens": (200, 3000),
        "Restaurantes": (25, 150),
        "Bares": (20, 100),
        "Sapatos": (80, 300),
        "Cabeleireiro": (30, 150),
        "Cosm√©ticos": (25, 200),
        "Cart√£o de Cr√©dito": (100, 2000),
        "Empr√©stimos": (200, 1500),
        "Financiamentos": (300, 2000),
        "Seguros": (50, 400),
        "Impostos": (100, 1500),
        "IPTU": (200, 1500),
        "IPVA": (200, 1500),
        "Multas": (50, 300),
        "Crian√ßas": (100, 800),
        "Pets": (50, 200),
        "Presentes": (30, 300),
        "Poupan√ßa": (100, 2000),
        "Previd√™ncia": (100, 800),
        "Doa√ß√µes": (20, 150),
        "Assinaturas": (10, 80),
        "Outros": (10, 300)
    }
    
    return faixas.get(categoria, (20, 200))

# ============================================================================
# FUN√á√ïES AUXILIARES
# ============================================================================

def gerar_uuid():
    """Gera UUID √∫nico"""
    return str(uuid.uuid4())

def gerar_data_aleatoria():
    """Gera data aleat√≥ria no per√≠odo"""
    inicio = datetime.strptime(DATA_INICIO, "%d/%m/%Y")
    fim = datetime.strptime(DATA_FIM, "%d/%m/%Y")
    delta = fim - inicio
    dias_aleatorios = random.randint(0, delta.days)
    data_aleatoria = inicio + timedelta(days=dias_aleatorios)
    return data_aleatoria.strftime("%d/%m/%Y")

def gerar_descricao_categoria(categoria, tipo_categoria):
    """Gera descri√ß√£o para uma categoria espec√≠fica"""
    
    # Usar gerador espec√≠fico se dispon√≠vel
    if categoria in GERADORES_ESPECIFICOS:
        if random.random() < 0.8:  # 80% chance de usar gerador espec√≠fico
            return GERADORES_ESPECIFICOS[categoria]()
    
    # Descri√ß√µes gen√©ricas para outras categorias
    if tipo_categoria == "receitas":
        formatos = [
            f"Transfer√™ncia Recebida - {categoria}",
            f"PIX Recebido - {categoria}",
            f"Dep√≥sito - {categoria}",
            f"TED Recebida - {categoria}"
        ]
    else:
        formatos = [
            f"Compra no d√©bito - {categoria}",
            f"Transfer√™ncia enviada pelo Pix - {categoria}",
            f"{categoria} - Pagamento",
            f"Conta de {categoria}"
        ]
    
    return random.choice(formatos)

# ============================================================================
# FUN√á√ÉO PRINCIPAL
# ============================================================================

def gerar_dados_categoria(categoria, tipo_categoria):
    """Gera dados para uma categoria espec√≠fica"""
    dados = []
    min_valor, max_valor = determinar_faixa_valor(categoria)
    
    # Mais exemplos para categorias cr√≠ticas
    exemplos = EXEMPLOS_POR_CATEGORIA
    if categoria in ["Transporte", "Streaming", "Alimenta√ß√£o", "Supermercado"]:
        exemplos = 50  # Dobrar exemplos para categorias que falharam
    
    for i in range(exemplos):
        # Gerar valor
        if tipo_categoria == "receitas":
            valor = round(random.uniform(min_valor, max_valor), 2)
        else:
            valor = -round(random.uniform(min_valor, max_valor), 2)
        
        # Gerar descri√ß√£o
        descricao = gerar_descricao_categoria(categoria, tipo_categoria)
        
        dados.append({
            "Data": gerar_data_aleatoria(),
            "Valor": valor,
            "Identificador": gerar_uuid(),
            "Descri√ß√£o": descricao,
            "Categoria": categoria
        })
    
    return dados

def main():
    """Fun√ß√£o principal"""
    print("Gerando dataset com solu√ß√£o emergencial...")
    
    todos_dados = []
    
    # Gerar receitas
    print("Processando receitas...")
    for categoria in CATEGORIAS_RECEITAS:
        dados = gerar_dados_categoria(categoria, "receitas")
        todos_dados.extend(dados)
        print(f"  ‚úÖ {categoria}: {len(dados)} exemplos")
    
    # Gerar despesas
    print("Processando despesas...")
    for categoria in CATEGORIAS_DESPESAS:
        dados = gerar_dados_categoria(categoria, "despesas")
        todos_dados.extend(dados)
        exemplos = 50 if categoria in ["Transporte", "Streaming", "Alimenta√ß√£o", "Supermercado"] else EXEMPLOS_POR_CATEGORIA
        print(f"  ‚úÖ {categoria}: {len(dados)} exemplos")
    
    # Embaralhar dados
    random.shuffle(todos_dados)
    
    # Criar DataFrame
    df = pd.DataFrame(todos_dados)
    
    # Salvar
    nome_arquivo = 'transacoes_emergencial_producao.csv'
    df.to_csv(nome_arquivo, index=False)
    
    print(f"\nüéâ DATASET EMERGENCIAL GERADO!")
    print("=" * 50)
    print(f"üìÑ Arquivo: {nome_arquivo}")
    print(f"üìä Total: {len(df)} transa√ß√µes")
    print(f"üìä Receitas: {len(df[df['Valor'] > 0])}")
    print(f"üìä Despesas: {len(df[df['Valor'] < 0])}")
    print(f"üìä Categorias: {df['Categoria'].nunique()}")
    
    # Estat√≠sticas das categorias cr√≠ticas
    print(f"\nüéØ FOCO NAS CATEGORIAS CR√çTICAS:")
    categorias_criticas = ["Transporte", "Streaming", "Alimenta√ß√£o", "Supermercado"]
    for cat in categorias_criticas:
        count = len(df[df['Categoria'] == cat])
        print(f"  {cat}: {count} exemplos")
    
    print(f"\nüö® CORRE√á√ïES APLICADAS:")
    print(f"  ‚ùå Removida categoria 'Taxas Banc√°rias' (causava 40% dos erros)")
    print(f"  ‚úÖ Adicionadas empresas reais: Uber, GOGIPSY, GIL DA TAPIOCA, etc.")
    print(f"  ‚úÖ Descri√ß√µes id√™nticas ao formato do banco")
    print(f"  ‚úÖ 50 exemplos para categorias que falharam")
    
    print(f"\nüéØ PR√ìXIMO PASSO:")
    print(f"Modifique seu treinamento_modelo_pre_processamento.py:")
    print(f"Troque: df = pd.read_csv('transacoes_melhorado.csv')")
    print(f"Por:    df = pd.read_csv('transacoes_emergencial_producao.csv')")
    
    return df

if __name__ == "__main__":
    dataset = main()

